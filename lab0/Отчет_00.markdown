# Министерство науки и высшего образования Российской Федерации

**Федеральное государственное автономное образовательное учреждение  
высшего образования  
«СЕВЕРО-КАВКАЗСКИЙ ФЕДЕРАЛЬНЫЙ УНИВЕРСИТЕТ»**

_Департамент цифровых, робототехнических систем и электроники института перспективной инженерии_

---

## Отчет по лабораторной работе №0

### дисциплины "Администрирование баз данных"

**Выполнила:** Гойдь Алина Яновна  
4 курс, группа ПИЖ-б-о-22-1  
09.03.04 "Программная инженерия"  
направленность (профиль) "Разработка и сопровождение программного обеспечения"  
очная форма обучения

**Руководитель практики:** Щеголев Алексей Алексеевич  
старший преподаватель департамента цифровых, робототехнических систем и электроники института перспективной инженерии

---

## Тема работы

Установка PostgreSQL и базовое управление сервером

## Цель работы

Освоить основные способы установки PostgreSQL (из пакетов и исходных кодов) в предустановленном окружении. Получить практические навыки создания кластера баз данных, запуска и остановки сервера, а также проверки его состояния. Научиться использовать утилиты `initdb`, `pg_ctl`, `pg_checksums` и `psql` для базового взаимодействия с СУБД.

---

## Ход выполнения работы

### Часть 1. Установка из пакетов (Ubuntu) и управление кластером

#### 1. Запуск образа XUbuntu

Запущен образ XUbuntu (https://edu.postgrespro.ru/16/DBA1-16.ova) на виртуальной машине.

![Запущенный образ](./images/img1.png)  
_Рисунок 1 - Запущенный образ_

#### 2. Установка PostgreSQL 16 из официальных пакетов

Использована команда `apt` для получения информации о пакетах PostgreSQL 16.

![Получение пакетов через команду apt](./images/img1.png)  
_Рисунок 2 - Получение пакетов через команду apt_

Пакеты PostgreSQL 16 уже были предустановлены в образе.

![Проверка каталога установки PostgreSQL](./images/image2.png)  
_Рисунок 3 - Проверка каталога установки PostgreSQL_

![Параметры сборки PostgreSQL](./images/image-3.png)  
_Рисунок 4 - Параметры сборки PostgreSQL_

#### 3. Проверка состояния автоматически созданного кластера

Проверено состояние автоматически созданного кластера `main` с помощью `pg_lsclusters`.

![Содержимое каталога кластера БД с именем main](./images/image-4.png)  
_Рисунок 5 - Содержимое каталога кластера БД с именем main_

![Проверка статуса кластера main](./images/image-5.png)  
_Рисунок 6 - Проверка статуса кластера main_

#### 4. Работа с контрольными суммами страниц данных

Остановлен кластер. Проверено состояние контрольных сумм страниц данных с помощью `pg_checksums --check`. Включен расчет контрольных сумм командой `pg_checksums --enable`. Запущен кластер и проверена его работоспособность.

![Остановка кластера main](./images/image-6.png)  
_Рисунок 7 - Остановка кластера main_

![Проверка и включение контрольной суммы страниц данных](./images/image-7.png)  
_Рисунок 8 - Проверка и включение контрольной суммы страниц данных_

![Повторный запуск кластера](./images/image-8.png)  
_Рисунок 9 - Повторный запуск кластера_

#### 5. Подключение к кластеру и выполнение запроса

Выполнено подключение к кластеру с помощью `psql` от имени пользователя `postgres` и выполнен простой запрос.

![Подключение к кластеру и запуск psql от имени postgres](./images/image-9.png)  
_Рисунок 10 - Подключение к кластеру и запуск psql от имени postgres_

![Результат работы команды SELECT version();](./images/image-10.png)  
_Рисунок 11 - Результат работы команды `SELECT version();`_

### Часть 2. Установка из исходных кодов

#### 1. Проверка инструментов для сборки

Проверено наличие необходимых инструментов для сборки (gcc, make, libreadline-dev и др.).

![Проверка основных инструментов](./images/image-11.png)  
_Рисунок 12 - Проверка основных инструментов_

#### 2. Сборка и установка PostgreSQL из исходных кодов

Загружен архив с исходными кодами PostgreSQL 16 (https://www.postgresql.org/ftp/source/). Архив распакован, сконфигурирована сборка с указанием каталога установки (`--prefix`) и нестандартного порта (`--with-pgport`). Выполнены сборка (`make`) и установка (`make install`) сервера.

![Распаковка архива](./images/image-12.png)  
_Рисунок 13 - Распаковка архива_

![Конфигурация сборки](./images/image-13.png)  
_Рисунок 14 - Конфигурация сборки_

![Сборка сервера](./images/image-14.png)  
_Рисунок 15 - Сборка сервера_

![Установка сервера](./images/image-15.png)  
_Рисунок 16 - Установка сервера_

#### 3. Инициализация нового кластера

Создан каталог для данных (PGDATA). Инициализирован новый кластер БД с помощью `initdb`, указан суперпользователь `postgres` и включен расчет контрольных сумм.

![Создание каталога данных и инициализация кластера](./images/image-16.png)  
_Рисунок 17 - Создание каталога данных и инициализация кластера_

#### 4. Запуск и тестирование сервера

Запущен сервер с помощью `pg_ctl`, указан файл для логов. Выполнено подключение к серверу через `psql` с указанием нестандартного порта, выполнен проверочный запрос. Сервер остановлен.

![Запуск, подключение, выполнение запроса и остановка сервера](./images/image-17.png)  
_Рисунок 18 - Запуск, подключение, выполнение запроса и остановка сервера_

---

## Вывод:

В результате выполнения данной работы были изучены 2 основные подхода к установке PostgreSQL, а также получены практические навыки работы с базовыми утилитами администрирования. Работа с обоими способами установки помогла понять особенности каждого подхода и их применимость в различных ситуациях. Особое внимание было уделено механизму контрольных сумм страниц данных как важному элементу обеспечения целостности информации в базе данных.
Сравнив установки из пакетов и сборки из исходного кода на практике выявились главные различия между этими подходами. Установка из готовых пакетов демонстрирует простоту и надежность – система автоматически разрешает зависимости, создает необходимые сервисы и обеспечивает интеграцию с операционной системой. Однако использование предустановленных параметров сборки ограничивает возможности настройки. Сборка из исходных кодов, напротив, предоставляет полный контроль над процессом установки, позволяя настроить любые параметры (как в данной работе - нестандартный порт 5555), оптимизировать производительность под конкретное оборудование и включить специфические модули. При этом такой подход требует значительно больше времени, знаний и усилий по настройке и дальнейшему обслуживанию системы.
Контрольные суммы страниц данных это механизм защиты от повреждения информации, работающий на низком уровне файловой системы. Их принцип работы основан на математическом вычислении хэша для каждой страницы данных при записи и последующей проверке этого хэша при чтении. Если контрольная сумма не совпадает, система немедленно сигнализирует о проблеме, что позволяет оперативно выявить повреждения, вызванные сбоями оборудования, ошибками файловой системы или другими техническими проблемами. Включение данного механизма особенно критично для производственных систем, где потеря или искажение данных может привести к серьезным последствиям. Важно, что контрольные суммы можно включить для существующего кластера только при его полной остановке, что подчеркивает необходимость планирования данной операции на этапе внедрения системы.

